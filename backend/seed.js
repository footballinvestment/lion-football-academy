const db = require('./src/database/connection');
const Team = require('./src/models/Team');
const Player = require('./src/models/Player');
const Training = require('./src/models/Training');
const Announcement = require('./src/models/Announcement');

async function seedData() {
    try {
        console.log('üå± Starting seed data creation...');

        // Create Teams
        console.log('üìö Creating teams...');
        const teams = [
            {
                name: 'U10 Oroszl√°nok',
                age_group: 'U10',
                season: '2024/2025',
                coach_name: 'Nagy P√©ter',
                team_color: 'piros'
            },
            {
                name: 'U12 Tigrisek',
                age_group: 'U12', 
                season: '2024/2025',
                coach_name: 'Kov√°cs J√°nos',
                team_color: 'k√©k'
            },
            {
                name: 'U14 S√≥lymok',
                age_group: 'U14',
                season: '2024/2025', 
                coach_name: 'Szab√≥ M√°rton',
                team_color: 'z√∂ld'
            }
        ];

        const createdTeams = [];
        for (const team of teams) {
            const result = await Team.create(team);
            createdTeams.push(result.id);
            console.log(`‚úÖ Created team: ${team.name}`);
        }

        // Create Players
        console.log('üë¶ Creating players...');
        const players = [
            // U10 Oroszl√°nok players
            {
                name: 'Kov√°cs P√©ter',
                birth_date: '2014-03-15',
                position: 'kapus',
                dominant_foot: 'jobb',
                team_id: createdTeams[0],
                parent_name: 'Kov√°cs L√°szl√≥',
                parent_phone: '+36301234567',
                parent_email: 'kovacs.laszlo@email.com',
                medical_notes: 'Asztma inhaler sz√ºks√©ges'
            },
            {
                name: 'Nagy Tam√°s',
                birth_date: '2014-07-22',
                position: 'v√©d≈ë',
                dominant_foot: 'jobb',
                team_id: createdTeams[0],
                parent_name: 'Nagy Zolt√°n',
                parent_phone: '+36302345678',
                parent_email: 'nagy.zoltan@email.com',
                medical_notes: null
            },
            {
                name: 'Szab√≥ D√°niel',
                birth_date: '2014-01-10',
                position: 'k√∂z√©pp√°ly√°s',
                dominant_foot: 'bal',
                team_id: createdTeams[0],
                parent_name: 'Szab√≥ Andrea',
                parent_phone: '+36303456789',
                parent_email: 'szabo.andrea@email.com',
                medical_notes: null
            },
            {
                name: 'T√≥th M√°rton',
                birth_date: '2014-09-05',
                position: 'csat√°r',
                dominant_foot: 'jobb',
                team_id: createdTeams[0],
                parent_name: 'T√≥th G√°bor',
                parent_phone: '+36304567890',
                parent_email: 'toth.gabor@email.com',
                medical_notes: null
            },
            {
                name: 'Varga √Åd√°m',
                birth_date: '2014-11-30',
                position: 'k√∂z√©pp√°ly√°s',
                dominant_foot: 'jobb',
                team_id: createdTeams[0],
                parent_name: 'Varga Katalin',
                parent_phone: '+36305678901',
                parent_email: 'varga.katalin@email.com',
                medical_notes: null
            },

            // U12 Tigrisek players
            {
                name: 'Horv√°th Bence',
                birth_date: '2012-04-18',
                position: 'kapus',
                dominant_foot: 'jobb',
                team_id: createdTeams[1],
                parent_name: 'Horv√°th R√≥bert',
                parent_phone: '+36306789012',
                parent_email: 'horvath.robert@email.com',
                medical_notes: null
            },
            {
                name: 'Kiss Levente',
                birth_date: '2012-08-14',
                position: 'v√©d≈ë',
                dominant_foot: 'bal',
                team_id: createdTeams[1],
                parent_name: 'Kiss √âva',
                parent_phone: '+36307890123',
                parent_email: 'kiss.eva@email.com',
                medical_notes: 'Szem√ºveg visel√©se sz√ºks√©ges'
            },
            {
                name: 'Moln√°r Alex',
                birth_date: '2012-02-28',
                position: 'csat√°r',
                dominant_foot: 'jobb',
                team_id: createdTeams[1],
                parent_name: 'Moln√°r Istv√°n',
                parent_phone: '+36308901234',
                parent_email: 'molnar.istvan@email.com',
                medical_notes: null
            },
            {
                name: 'Lakatos Norbert',
                birth_date: '2012-06-11',
                position: 'k√∂z√©pp√°ly√°s',
                dominant_foot: 'jobb',
                team_id: createdTeams[1],
                parent_name: 'Lakatos M√°ria',
                parent_phone: '+36309012345',
                parent_email: 'lakatos.maria@email.com',
                medical_notes: null
            },
            {
                name: 'Papp Krist√≥f',
                birth_date: '2012-12-03',
                position: 'v√©d≈ë',
                dominant_foot: 'bal',
                team_id: createdTeams[1],
                parent_name: 'Papp J√≥zsef',
                parent_phone: '+36301023456',
                parent_email: 'papp.jozsef@email.com',
                medical_notes: null
            },

            // U14 S√≥lymok players
            {
                name: 'Farkas M√°t√©',
                birth_date: '2010-05-25',
                position: 'kapus',
                dominant_foot: 'jobb',
                team_id: createdTeams[2],
                parent_name: 'Farkas P√©ter',
                parent_phone: '+36302134567',
                parent_email: 'farkas.peter@email.com',
                medical_notes: null
            },
            {
                name: 'Simon Zolt√°n',
                birth_date: '2010-09-17',
                position: 'v√©d≈ë',
                dominant_foot: 'jobb',
                team_id: createdTeams[2],
                parent_name: 'Simon Judit',
                parent_phone: '+36303245678',
                parent_email: 'simon.judit@email.com',
                medical_notes: null
            },
            {
                name: 'Balogh Viktor',
                birth_date: '2010-01-20',
                position: 'csat√°r',
                dominant_foot: 'bal',
                team_id: createdTeams[2],
                parent_name: 'Balogh Andr√°s',
                parent_phone: '+36304356789',
                parent_email: 'balogh.andras@email.com',
                medical_notes: 'T√©rds√©r√ºl√©s m√∫lt - √≥vatoss√°g sz√ºks√©ges'
            },
            {
                name: 'T√∂r√∂k Benj√°min',
                birth_date: '2010-07-08',
                position: 'k√∂z√©pp√°ly√°s',
                dominant_foot: 'jobb',
                team_id: createdTeams[2],
                parent_name: 'T√∂r√∂k Anita',
                parent_phone: '+36305467890',
                parent_email: 'torok.anita@email.com',
                medical_notes: null
            },
            {
                name: 'Antal Gerg≈ë',
                birth_date: '2010-11-12',
                position: 'v√©d≈ë',
                dominant_foot: 'bal',
                team_id: createdTeams[2],
                parent_name: 'Antal Tam√°s',
                parent_phone: '+36306578901',
                parent_email: 'antal.tamas@email.com',
                medical_notes: null
            }
        ];

        const createdPlayers = [];
        for (const player of players) {
            const result = await Player.create(player);
            createdPlayers.push(result.id);
            console.log(`‚úÖ Created player: ${player.name}`);
        }

        // Create Training Sessions
        console.log('üèÉ Creating training sessions...');
        const today = new Date();
        const tomorrow = new Date(today);
        tomorrow.setDate(tomorrow.getDate() + 1);
        const nextWeek = new Date(today);
        nextWeek.setDate(nextWeek.getDate() + 7);

        const trainings = [
            {
                date: tomorrow.toISOString().split('T')[0],
                time: '17:00',
                duration: 90,
                location: 'F≈ëp√°lya',
                type: 'alapoz√≥ edz√©s',
                team_id: createdTeams[0],
                training_plan: 'Alapvet≈ë labdakezel√©s, passzol√°s, kapura l√∂v√©s gyakorlatok'
            },
            {
                date: tomorrow.toISOString().split('T')[0],
                time: '18:30',
                duration: 90,
                location: 'F≈ëp√°lya',
                type: 'taktikai edz√©s',
                team_id: createdTeams[1],
                training_plan: 'Form√°ci√≥k gyakorl√°sa, v√©dekez√©si taktik√°k'
            },
            {
                date: nextWeek.toISOString().split('T')[0],
                time: '16:00',
                duration: 120,
                location: 'Mell√©kl√©p√°lya',
                type: 'kondicion√°lis edz√©s',
                team_id: createdTeams[2],
                training_plan: '√Åll√≥k√©pess√©g fejleszt√©s, er≈ës√≠t≈ë gyakorlatok, gyorsas√°g'
            },
            {
                date: nextWeek.toISOString().split('T')[0],
                time: '10:00',
                duration: 60,
                location: 'Terem',
                type: 'elm√©leti oktat√°s',
                team_id: createdTeams[0],
                training_plan: 'J√°t√©kszab√°lyok, fair play, csapatszellem'
            }
        ];

        for (const training of trainings) {
            const result = await Training.create(training);
            console.log(`‚úÖ Created training: ${training.type} for ${training.date}`);
        }

        // Create Announcements
        console.log('üì¢ Creating announcements...');
        const announcements = [
            {
                title: '√öj edz√©si id≈ëpontok',
                content: 'Figyelm√©be aj√°nljuk, hogy a k√∂vetkez≈ë h√©tt≈ël m√≥dosulnak az edz√©si id≈ëpontok. K√©rj√ºk, ellen≈ërizz√©k az √∫j beoszt√°st!',
                category: 'edz√©s',
                team_id: null, // All teams
                urgent: true
            },
            {
                title: 'Torn√°ra jelentkez√©s',
                content: 'A tavaszi ifj√∫s√°gi torn√°ra jelentkez√©s m√°rcius 15-ig lehets√©ges. Tov√°bbi inform√°ci√≥k√©rt keress√©k az edz≈ëket!',
                category: 'verseny',
                team_id: null,
                urgent: false
            },
            {
                title: 'U10 csapat k√ºl√∂nleges edz√©s',
                content: 'Az U10 Oroszl√°nok csapata sz√°m√°ra extra edz√©st szervez√ºnk a h√©tv√©g√©n. A r√©szv√©tel √∂nk√©ntes.',
                category: 'edz√©s',
                team_id: createdTeams[0],
                urgent: false
            },
            {
                title: 'Sz√ºl≈ëi √©rtekezlet',
                content: 'Minden sz√ºl≈ët szeretettel v√°runk a k√∂vetkez≈ë sz√ºl≈ëi √©rtekezletre m√°rcius 20-√°n 18:00-kor.',
                category: 'esem√©ny',
                team_id: null,
                urgent: true
            }
        ];

        for (const announcement of announcements) {
            const result = await Announcement.create(announcement);
            console.log(`‚úÖ Created announcement: ${announcement.title}`);
        }

        console.log('\nüéâ Seed data created successfully!');
        console.log(`üìä Created ${createdTeams.length} teams, ${createdPlayers.length} players, ${trainings.length} trainings, and ${announcements.length} announcements`);
        
        // Display summary
        console.log('\nüìã Summary:');
        console.log('Teams:');
        teams.forEach((team, index) => {
            console.log(`  ${index + 1}. ${team.name} (${team.age_group}) - Edz≈ë: ${team.coach_name}`);
        });
        
        console.log('\nüë¶ Total players by team:');
        const u10Players = players.filter(p => p.team_id === createdTeams[0]).length;
        const u12Players = players.filter(p => p.team_id === createdTeams[1]).length;
        const u14Players = players.filter(p => p.team_id === createdTeams[2]).length;
        console.log(`  U10 Oroszl√°nok: ${u10Players} j√°t√©kos`);
        console.log(`  U12 Tigrisek: ${u12Players} j√°t√©kos`);
        console.log(`  U14 S√≥lymok: ${u14Players} j√°t√©kos`);

        process.exit(0);
        
    } catch (error) {
        console.error('‚ùå Error creating seed data:', error);
        process.exit(1);
    }
}

// Run seed data creation
seedData();