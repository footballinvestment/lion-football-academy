import React, { useState, useEffect, useCallback, useContext } from 'react';
import { AuthContext } from '../context/AuthContext';
import ErrorBoundary from '../components/ErrorBoundary';
import LoadingSpinner from '../components/LoadingSpinner';
import ResponsiveTable, { createPlayerTableConfig } from '../components/ResponsiveTable';
import apiService from '../services/api';
import PlayerList from '../components/PlayerList';
import PlayerModal from '../components/PlayerModal';
import { handleApiError, ErrorAlert, ConfirmationModal } from '../utils/errorHandler';

const Players = () => {
    const { user, canViewAllPlayers } = useContext(AuthContext);
    const [players, setPlayers] = useState([]);
    const [teams, setTeams] = useState([]);
    const [showModal, setShowModal] = useState(false);
    const [selectedPlayer, setSelectedPlayer] = useState(null);
    const [searchTerm, setSearchTerm] = useState('');
    const [filterTeam, setFilterTeam] = useState('');
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [deleteConfirm, setDeleteConfirm] = useState({ show: false, playerId: null, playerName: '' });

    const fetchData = useCallback(async () => {
        try {
            setLoading(true);
            
            // Check permissions before making API calls
            if (!canViewAllPlayers()) {
                setError('Nincs jogosults√°ga az √∂sszes j√°t√©kos megtekint√©s√©hez. Ez az oldal csak adminisztr√°torok √©s edz≈ëk sz√°m√°ra el√©rhet≈ë.');
                setLoading(false);
                return;
            }
            
            const [playersRes, teamsRes] = await Promise.all([
                apiService.players.getAll(),
                apiService.teams.getAll()
            ]);
            
            setPlayers(playersRes.data);
            setTeams(teamsRes.data);
        } catch (error) {
            console.error('Hiba az adatok bet√∂lt√©s√©n√©l:', error);
            const errorMessage = handleApiError(error);
            setError(errorMessage);
        } finally {
            setLoading(false);
        }
    }, [canViewAllPlayers]);

    useEffect(() => {
        fetchData();
    }, [fetchData]);

    // J√°t√©kosok sz≈±r√©se
    const filteredPlayers = players.filter(player => {
        const matchesSearch = player.name.toLowerCase().includes(searchTerm.toLowerCase());
        const matchesTeam = filterTeam === '' || player.team_id === parseInt(filterTeam);
        return matchesSearch && matchesTeam;
    });

    // CRUD m≈±veletek
    const handleAddPlayer = async (playerData) => {
        try {
            const response = await apiService.players.create(playerData);
            setPlayers([...players, response.data]);
            setShowModal(false);
            setSelectedPlayer(null);
        } catch (error) {
            console.error('Hiba a j√°t√©kos hozz√°ad√°s√°n√°l:', error);
            throw error; // A PlayerModal-ban kezelj√ºk
        }
    };

    const handleEditPlayer = async (id, playerData) => {
        try {
            const response = await apiService.players.update(id, playerData);
            setPlayers(players.map(p => p.id === id ? response.data : p));
            setShowModal(false);
            setSelectedPlayer(null);
        } catch (error) {
            console.error('Hiba a j√°t√©kos m√≥dos√≠t√°s√°n√°l:', error);
            throw error; // A PlayerModal-ban kezelj√ºk
        }
    };

    const handleDeletePlayer = (id) => {
        const player = players.find(p => p.id === id);
        setDeleteConfirm({
            show: true,
            playerId: id,
            playerName: player ? player.name : 'Ismeretlen j√°t√©kos'
        });
    };

    const confirmDelete = async () => {
        try {
            await apiService.players.delete(deleteConfirm.playerId);
            setPlayers(players.filter(p => p.id !== deleteConfirm.playerId));
            setDeleteConfirm({ show: false, playerId: null, playerName: '' });
        } catch (error) {
            console.error('Hiba a j√°t√©kos t√∂rl√©s√©n√©l:', error);
            const errorMessage = handleApiError(error);
            setError(errorMessage);
        }
    };

    const cancelDelete = () => {
        setDeleteConfirm({ show: false, playerId: null, playerName: '' });
    };

    const openAddModal = () => {
        setSelectedPlayer(null);
        setShowModal(true);
    };

    const openEditModal = (player) => {
        setSelectedPlayer(player);
        setShowModal(true);
    };

    const closeModal = () => {
        setShowModal(false);
        setSelectedPlayer(null);
    };

    if (loading) {
        return <LoadingSpinner fullPage text="J√°t√©kosok bet√∂lt√©se..." />;
    }

    if (error) {
        return (
            <ErrorAlert 
                message={error} 
                onClose={() => setError(null)}
            />
        );
    }

    return (
        <ErrorBoundary>
            <div>
            <div className="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center mb-4">
                <h1 className="mb-3 mb-md-0">üë• J√°t√©kosok Kezel√©se</h1>
                <button 
                    className="btn btn-primary mobile-btn"
                    onClick={openAddModal}
                >
                    <i className="fas fa-plus me-2"></i>
                    √öj J√°t√©kos
                </button>
            </div>

            {/* Keres√©s √©s sz≈±r√©s */}
            <div className="row mb-4">
                <div className="col-md-6">
                    <div className="input-group">
                        <span className="input-group-text">üîç</span>
                        <input
                            type="text"
                            className="form-control"
                            placeholder="Keres√©s n√©v alapj√°n..."
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                        />
                    </div>
                </div>
                <div className="col-md-4">
                    <select
                        className="form-select"
                        value={filterTeam}
                        onChange={(e) => setFilterTeam(e.target.value)}
                    >
                        <option value="">üèÜ √ñsszes csapat</option>
                        {teams.map(team => (
                            <option key={team.id} value={team.id}>
                                {team.name} ({team.age_group})
                            </option>
                        ))}
                    </select>
                </div>
                <div className="col-md-2">
                    <button 
                        className="btn btn-outline-secondary w-100"
                        onClick={() => {
                            setSearchTerm('');
                            setFilterTeam('');
                        }}
                    >
                        üóëÔ∏è T√∂rl√©s
                    </button>
                </div>
            </div>

            {/* Statisztik√°k */}
            <div className="row mb-3">
                <div className="col-md-12">
                    <div className="alert alert-info">
                        <strong>üìä Statisztik√°k:</strong> 
                        {' '}√ñsszesen {players.length} j√°t√©kos
                        {searchTerm || filterTeam ? ` (${filteredPlayers.length} sz≈±rt eredm√©ny)` : ''}
                        {' '}‚Ä¢ {teams.length} csapat
                    </div>
                </div>
            </div>

            {/* J√°t√©kosok list√°ja */}
            <div className="card">
                <div className="card-body p-0">
                    <ResponsiveTable 
                        {...createPlayerTableConfig(openEditModal, handleDeletePlayer)}
                        data={filteredPlayers}
                        emptyMessage="Nincs j√°t√©kos a megadott krit√©riumoknak megfelel≈ëen"
                    />
                </div>
            </div>

            {/* Modal */}
            {showModal && (
                <PlayerModal
                    player={selectedPlayer}
                    teams={teams}
                    onSave={selectedPlayer ? 
                        (data) => handleEditPlayer(selectedPlayer.id, data) : 
                        handleAddPlayer
                    }
                    onClose={closeModal}
                />
            )}

            {/* Delete confirmation modal */}
            <ConfirmationModal
                show={deleteConfirm.show}
                title="J√°t√©kos t√∂rl√©se"
                message={`Biztosan t√∂r√∂lni szeretn√©d "${deleteConfirm.playerName}" j√°t√©kost? Ez a m≈±velet nem vonhat√≥ vissza.`}
                onConfirm={confirmDelete}
                onCancel={cancelDelete}
                confirmText="T√∂rl√©s"
                cancelText="M√©gse"
                variant="danger"
            />
            </div>
        </ErrorBoundary>
    );
};

export default Players;